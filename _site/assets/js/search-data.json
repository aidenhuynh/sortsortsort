{
  
    
        "post0": {
            "title": "Individual Review Ticket - Aiden",
            "content": "Features/Runtime: . Main sort page: Edited Toby’s CSS to make it more like the wireframe | Added functioning random list insert | Fixed scaling of number tiles | Added functioning user input list | . | . Backend . Sorting Algorithm Starters Wrote 6 algorithms for variants of bubble and selection sort | Example algorithm: For loop selection sort private static int[] selectionFor(int[] arr) { // For loop to iterate through whole array, except last value because it will already be sorted by then for (int i = 0; i &lt; arr.length - 1; i ++) { // Define the minimum index by setting it to the first element not iterated yet int minIndex = i; // For loop to iterate through all elements after previous run for (int j = i + 1; j &lt; arr.length; j ++) { // If selected value is lower than current minimum, set the new minimum if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // If the minimum is different from the current value, swap them if (minIndex != i) { int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } } return arr; } printArr(selectionFor(test)); . | . | Backend integration: Moved algorithms from notebook to backend | Example algorithm: For loop selection sort public class ForSortSelection extends Selection { public ForSortSelection(){ super(&quot;Insertion Sort For Loop&quot;); } public ArrayList runSort(ArrayList arr){ super.list = arr; long startTime = System.nanoTime(); int n = arr.size(); // For loop to iterate through whole array, except last value because it will already be sorted by then for (int i = 0; i &lt; n - 1; i ++) { // Define the minimum index by setting it to the first element not iterated yet int minIndex = i; super.iterations += 1; // For loop to iterate through all elements after previous run for (int j = i + 1; j &lt; n; j ++) { super.iterations += 1; super.comparisons += 1; // If selected value is lower than current minimum, set the new minimum if (arr.get(j) &lt; arr.get(minIndex)) { minIndex = j; } } // If the minimum is different from the current value, swap them if (minIndex != i) { super.swaps.add(arr.get(minIndex)); super.comparisons += 1; int temp = arr.get(i); super.swaps.add(temp); arr.set(i,arr.get(minIndex)); arr.set(minIndex, temp); } } super.times.add(System.nanoTime() - startTime); return arr; } } . | . | . Key Commits: . Selection and Bubble Sorts | Main UI | . GitHub Analytics: . Frontend Commits | Backend Commits | Profile | . . Video: . Reflection: . Learning: . I have definitely gotten a lot more used to Java syntax (I don’t forget semicolons every single time now), as I have done a lot more work with it than before. This is the most OOP I have done and honestly, I still don’t enjoy doing it. . Improvements: . I need to be able to make myself work even if I do not feel strongly about the project. This was a very simple sorting algorithm project that was not at all hard to code and yet this is the lowest score I have gotten in the class because I simply did not want to work on it. I don’t think the lack of challenge necessarily demotivated me but the subject matter definitely did. I enjoy making things for fun that can be used in outside contexts, but this project is pretty much exclusively going to be used just for grading once and then never again. I understand that this is teaching us analysis, but I think this could all be gathered from a student lesson or tech talk (we did do one in CSP). . I also need to work harder as a Scrum Master, because I am still struggling to keep all members working. After all, they are also demotivated probably for the same reasons as me. Primarily, I would like to increase communication within my group, and to do so, I will likely start moving away from Slack, because it seems that some people do not use it outside of class. . I was not able to make a video to demonstrate my features working because the team could not pull together in the last step of integrating the frontend and backend, as we lacked communication as addressed before. . Summary: . Learned Java Syntax | Most practice with OOP | Need better collaboration | Need better communication | Need more motivation | .",
            "url": "http://localhost:4100/sortsortsort/2023/12/11/aiden_review.html",
            "relUrl": "/2023/12/11/aiden_review.html",
            "date": " • Dec 11, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Review",
            "content": "CSS/Frontend testing . | Algorithms testing . | Insertion testing . | .",
            "url": "http://localhost:4100/sortsortsort/2023/12/04/review.html",
            "relUrl": "/2023/12/04/review.html",
            "date": " • Dec 4, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Csstest",
            "content": "Submit Random List Bubble Insertion Selection Merge",
            "url": "http://localhost:4100/sortsortsort/2023/11/23/csstest.html",
            "relUrl": "/2023/11/23/csstest.html",
            "date": " • Nov 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Sorting Algorithms Test",
            "content": "Globals . // Initialize test array for sorting public int[] test = new int[]{1, 5, 6, 3, 78, 2, 2}; // Method for displaying array public String printArr(int[] arr) { // Show start of list String text = &quot;[&quot;; // Add elements to list String for (int i = 0; i &lt; arr.length; i ++) { text += arr[i]; // Add commas if not last element in list if (i != arr.length - 1) { text += &quot;, &quot;; } } // Add end of list text += &quot;]&quot;; return text; } . Selection Sort . For loop . private static int[] selectionFor(int[] arr) { // For loop to iterate through whole array, except last value because it will already be sorted by then for (int i = 0; i &lt; arr.length - 1; i ++) { // Define the minimum index by setting it to the first element not iterated yet int minIndex = i; // For loop to iterate through all elements after previous run for (int j = i + 1; j &lt; arr.length; j ++) { // If selected value is lower than current minimum, set the new minimum if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // If the minimum is different from the current value, swap them if (minIndex != i) { int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } } return arr; } printArr(selectionFor(test)); . [1, 2, 2, 3, 5, 6, 78] . While Loop . private static int[] selectionWhile(int[] arr) { // While loop to iterate through whole array, except last value because it will already be sorted by then int i = 0; while (i &lt; arr.length - 1) { // Define the minimum index by setting it to the first element not iterated yet int minIndex = i; // While loop to iterate through all elements after previous run int j = i + 1; while (j &lt; arr.length) { // If selected value is lower than current minimum, set the new minimum if (arr[j] &lt; arr[minIndex]) { minIndex = j; } j += 1; } // If the minimum is different from the current value, swap them if (minIndex != i) { int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } i += 1; } return arr; } printArr(insertionWhile(test)); . [1, 2, 2, 3, 5, 6, 78] . Recursive . private static int[] selectionRecur(int[] arr, int n) { // If passing the last element in the array, stop if (n == arr.length - 1) { return arr; } // Set minimum index to current int minIndex = n; // If different value is less than current minimum, set minIndex to that value&#39;s index for (int j = n + 1; j &lt; arr.length; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // Swap minimum with initial index if (minIndex != n) { int temp = arr[n]; arr[n] = arr[minIndex]; arr[minIndex] = temp; } // Recursive call for the next index selectionRecur(arr, n + 1); return arr; } printArr(selectionRecur(test, 0)); . [1, 2, 2, 3, 5, 6, 78] . Bubble Sort . For loop . private static int[] bubbleFor(int[] arr) { // Iterate through list for (int i = 0; i &lt; arr.length - 1; i ++) { // Iterate through previous element in list for (int j = 0; j &lt; arr.length - i - 1; j ++) { // Swap if necessary if (arr[j] &gt; arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } return arr; } printArr(bubbleFor(test)); . [1, 2, 2, 3, 5, 6, 78] . While loop . private static int[] bubbleWhile(int[] arr) { int i = 0; while (i &lt; arr.length - 1) { int j = 0; while (j &lt; arr.length - i - 1) { if (arr[j] &gt; arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } j++; } i++; } return arr; } printArr(bubbleWhile(test)); . [1, 2, 2, 3, 5, 6, 78] . Recursive . private static int[] bubbleRecur(int[] arr) { for (int i = 0; i &lt; arr.length - 1; i ++) { if (arr[i] &gt; arr[i + 1]) { int temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; bubbleRecur(arr); } } return arr; } printArr(bubbleRecur(test)); . [1, 2, 2, 3, 5, 6, 78] . Inheritance Testing . . import java.util.ArrayList; public class Sort { double time; int[] array; ArrayList swaps = new ArrayList(); // array setter public void setArray(int[] arr) { this.array = arr; } // Method for adding each swap public void swap(int i, int j) { this.swaps.add(i); this.swaps.add(j); } // Method for displaying array public String printArr() { // Show start of list String text = &quot;[&quot;; int[] arr = this.array; // Add elements to list String for (int i = 0; i &lt; arr.length; i ++) { text += arr[i]; // Add commas if not last element in list if (i != arr.length - 1) { text += &quot;, &quot;; } } // Add end of list text += &quot;]&quot;; return text; } } public class Selection extends Sort { int[] arr = super.array; public int[] forLoop() { int[] arr = this.arr; // For loop to iterate through whole array, except last value because it will already be sorted by then for (int i = 0; i &lt; arr.length - 1; i ++) { // Define the minimum index by setting it to the first element not iterated yet int minIndex = i; // For loop to iterate through all elements after previous run for (int j = i + 1; j &lt; arr.length; j ++) { // If selected value is lower than current minimum, set the new minimum if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // If the minimum is different from the current value, swap them if (minIndex != i) { int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } } return arr; } private int[] whileLoop() { int[] arr = this.arr; // While loop to iterate through whole array, except last value because it will already be sorted by then int i = 0; while (i &lt; arr.length - 1) { // Define the minimum index by setting it to the first element not iterated yet int minIndex = i; // While loop to iterate through all elements after previous run int j = i + 1; while (j &lt; arr.length) { // If selected value is lower than current minimum, set the new minimum if (arr[j] &lt; arr[minIndex]) { minIndex = j; } j += 1; } // If the minimum is different from the current value, swap them if (minIndex != i) { int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } i += 1; } return arr; } private int[] recursive() { int[] arr = this.arr; return recursiveSwap(0); } private int[] recursiveSwap(int n) { // If passing the last element in the array, stop if (n == arr.length - 1) { return arr; } // Set minimum index to current int minIndex = n; // If different value is less than current minimum, set minIndex to that value&#39;s index for (int j = n + 1; j &lt; arr.length; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // Swap minimum with initial index if (minIndex != n) { int temp = arr[n]; arr[n] = arr[minIndex]; arr[minIndex] = temp; } // Recursive call for the next index recursiveSwap(arr, n + 1); return arr; } } Sort algorithm = new Selection(); // algorithm.setArray([0, 3, 2, 1]); .",
            "url": "http://localhost:4100/sortsortsort/2023/11/17/algorithms_IPYNB_2_.html",
            "relUrl": "/2023/11/17/algorithms_IPYNB_2_.html",
            "date": " • Nov 17, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Project Plans",
            "content": "SASS . Wireframe | . Example image . Fibonacci . something or other | Different loops under the same class (methods &amp; inheritance) | . Sorting . bubble | insertion | selection | merge | l | . Inheritance . We will be using interfaces or an abstract class | Share user inputted array, size | . Analyze . Count times of all methods, different page for comparing average ratios for time “On average, selection sort is 1.5x faster than bubble sort” or something | . | .",
            "url": "http://localhost:4100/sortsortsort/2023/11/15/ideation.html",
            "relUrl": "/2023/11/15/ideation.html",
            "date": " • Nov 15, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Creators of Alien World .",
          "url": "http://localhost:4100/sortsortsort/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
      ,"page5": {
          "title": "",
          "content": "Invert Idle Barking Walking",
          "url": "http://localhost:4100/sortsortsort/navigation/game.html",
          "relUrl": "/navigation/game.html",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Sorting Algorithms & Inheritance",
          "content": ". Submit Random List Bubble Insertion Selection Merge",
          "url": "http://localhost:4100/sortsortsort/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page11": {
          "title": "Time Box",
          "content": "",
          "url": "http://localhost:4100/sortsortsort/time/",
          "relUrl": "/time/",
          "date": ""
      }
      
  

  
  

  
  

}